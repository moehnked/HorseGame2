[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 0

[sub_resource type="VisualShaderNodeScalarClamp" id=6]

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorDecompose" id=9]

[sub_resource type="VisualShaderNodeVectorCompose" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 2

[sub_resource type="VisualShader" id=12]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = COLOR.rgb;

// VectorDecompose:7
	float n_out7p0 = n_out6p0.x;
	float n_out7p1 = n_out6p0.y;
	float n_out7p2 = n_out6p0.z;

// Input:5
	vec3 n_out5p0 = VERTEX;

// ScalarOp:9
	float n_out9p0 = n_out7p0 * dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:10
	float n_out10p0 = n_out7p1 * dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:11
	float n_out11p0 = n_out7p2 * dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333));

// VectorCompose:8
	vec3 n_out8p0 = vec3(n_out9p0, n_out10p0, n_out11p0);

// VectorOp:12
	vec3 n_out12p0 = n_out8p0 * n_out5p0;

// Input:2
	float n_out2p0 = TIME;

// ScalarFunc:3
	float n_out3p0 = sin(n_out2p0);

// ScalarClamp:4
	float n_in4p1 = 0.00000;
	float n_in4p2 = 1.00000;
	float n_out4p0 = clamp(n_out3p0, n_in4p1, n_in4p2);

// Output:0
	ALBEDO = n_out12p0;
	ALPHA = n_out4p0;

}

void light() {
// Output:0

}
"
nodes/fragment/0/position = Vector2( 620, 160 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -200, 360 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -40, 360 )
nodes/fragment/4/node = SubResource( 6 )
nodes/fragment/4/position = Vector2( 180, 360 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( -560, 220 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -520, 120 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -320, 80 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( 180, 80 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -20, 60 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -360, 200 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -160, 240 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 400, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 0, 1, 6, 0, 7, 0, 7, 0, 9, 0, 3, 0, 4, 0, 9, 0, 8, 0, 7, 1, 10, 0, 5, 0, 10, 1, 10, 0, 8, 1, 5, 0, 9, 1, 7, 2, 11, 0, 5, 0, 11, 1, 11, 0, 8, 2, 8, 0, 12, 0, 5, 0, 12, 1, 12, 0, 0, 0 )

[resource]
shader = SubResource( 12 )
