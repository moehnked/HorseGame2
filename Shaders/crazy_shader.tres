[gd_resource type="VisualShader" load_steps=13 format=2]

[ext_resource path="res://Textures/misc/starry_texture.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarFunc" id=1]
function = 2

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.2, 1, 0.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 4

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=6]

[sub_resource type="VisualShaderNodeVectorCompose" id=7]

[sub_resource type="VisualShaderNodeScalarOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
function = 0

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:8
	float n_out8p0 = TIME;

// ScalarOp:12
	float n_in12p0 = 0.20000;
	float n_out12p0 = n_in12p0 * n_out8p0;

// ScalarFunc:9
	float n_out9p0 = sin(n_out12p0);

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:4
	float n_out4p0 = n_out3p0.x;
	float n_out4p1 = n_out3p0.y;
	float n_out4p2 = n_out3p0.z;

// ScalarOp:6
	float n_out6p0 = n_out9p0 * n_out4p0;

// ScalarFunc:11
	float n_out11p0 = tan(n_out12p0);

// ScalarOp:7
	float n_out7p0 = n_out4p1 * n_out11p0;

// VectorCompose:5
	float n_in5p2 = 0.00000;
	vec3 n_out5p0 = vec3(n_out6p0, n_out7p0, n_in5p2);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out5p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorOp:13
	vec3 n_out13p0 = mod(vec3(n_out9p0), n_out2p0);

// Output:0
	ALBEDO = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -510.718, -145.202 )
flags/unshaded = true
nodes/fragment/0/position = Vector2( 580, 140 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( 40, 160 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -920, 160 )
nodes/fragment/4/node = SubResource( 6 )
nodes/fragment/4/position = Vector2( -740, 160 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( -180, 160 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -380, 100 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -380, 260 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( -1000, 20 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -580, 0 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( -640, 300 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -820, 0 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 340, 160 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 6, 0, 5, 0, 7, 0, 5, 1, 5, 0, 2, 0, 4, 0, 6, 1, 4, 1, 7, 0, 9, 0, 6, 0, 11, 0, 7, 1, 8, 0, 12, 1, 12, 0, 9, 0, 12, 0, 11, 0, 9, 0, 13, 0, 2, 0, 13, 1, 13, 0, 0, 0 )
