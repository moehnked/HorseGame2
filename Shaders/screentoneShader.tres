[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[ext_resource path="res://Textures/misc/screentone02.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=2]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 12.0, 1, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=9]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=11]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=12]
default_input_values = [ 0, 12.0, 1, 8.0, 2, 0.0 ]

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Input:7
	float n_out7p0 = TIME;

// ScalarFunc:11
	float n_out11p0 = sin(n_out7p0);

// ScalarOp:13
	float n_in13p1 = 1.00000;
	float n_out13p0 = n_out11p0 + n_in13p1;

// ScalarOp:14
	float n_in14p0 = 12.00000;
	float n_out14p0 = n_in14p0 + n_out13p0;

// VectorCompose:9
	float n_in9p1 = 8.00000;
	float n_in9p2 = 0.00000;
	vec3 n_out9p0 = vec3(n_out14p0, n_in9p1, n_in9p2);

// VectorOp:8
	vec3 n_out8p0 = n_out3p0 * n_out9p0;

// ScalarOp:10
	float n_in10p1 = 0.50000;
	float n_out10p0 = n_out7p0 * n_in10p1;

// VectorOp:5
	vec3 n_out5p0 = n_out8p0 + vec3(n_out10p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out5p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarOp:15
	float n_in15p1 = 0.50000;
	float n_out15p0 = n_out13p0 * n_in15p1;

// ScalarOp:12
	float n_out12p0 = n_out2p1 * n_out15p0;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out12p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1304.36, -75.59 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -140, 20 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -860, -160 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( -360, 0 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -940, 340 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( -680, -140 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( -960, -80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -547, 130.25 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -640, 360 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 220, 220 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -440, 300 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -1240, -60 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -20, 320 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 5, 0, 2, 0, 3, 0, 8, 0, 9, 0, 8, 1, 8, 0, 5, 0, 7, 0, 10, 0, 10, 0, 5, 1, 7, 0, 11, 0, 2, 1, 12, 0, 12, 0, 0, 1, 11, 0, 13, 0, 14, 0, 9, 0, 13, 0, 15, 0, 15, 0, 12, 1, 13, 0, 14, 1 )

[resource]
shader = SubResource( 13 )
