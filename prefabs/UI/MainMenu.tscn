[gd_scene load_steps=31 format=2]

[ext_resource path="res://Sprites/UI/mainmenu/fronttree.png" type="Texture" id=1]
[ext_resource path="res://Sprites/UI/mainmenu/foreground.png" type="Texture" id=2]
[ext_resource path="res://Sprites/UI/mainmenu/mid.png" type="Texture" id=3]
[ext_resource path="res://Sprites/UI/mainmenu/bg_02.png" type="Texture" id=4]
[ext_resource path="res://Sprites/UI/mainmenu/trees.png" type="Texture" id=5]
[ext_resource path="res://Scripts/UI/GameMenu.gd" type="Script" id=6]
[ext_resource path="res://Sprites/UI/mainmenu/horse.png" type="Texture" id=7]
[ext_resource path="res://Sprites/UI/mainmenu/bg.png" type="Texture" id=8]
[ext_resource path="res://Sprites/UI/mainmenu/vignette.png" type="Texture" id=9]
[ext_resource path="res://Sprites/UI/mainmenu/horse_woods.png" type="Texture" id=10]
[ext_resource path="res://Sprites/UI/logo.png" type="Texture" id=11]
[ext_resource path="res://Sprites/UI/2.png" type="Texture" id=12]
[ext_resource path="res://fonts/diag_01.tres" type="DynamicFont" id=13]
[ext_resource path="res://Scripts/UI/PressStart.gd" type="Script" id=14]
[ext_resource path="res://Music/embody.wav" type="AudioStream" id=15]
[ext_resource path="res://prefabs/System/AudioManager.tscn" type="PackedScene" id=16]
[ext_resource path="res://prefabs/Misc/Events/PlaySound.tscn" type="PackedScene" id=17]
[ext_resource path="res://Sounds/UI_Select_A.wav" type="AudioStream" id=18]

[sub_resource type="Shader" id=1]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;
uniform float finalAlpha = 1.0;
uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, (rays * color.a * finalAlpha));
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/finalAlpha = 0.0
shader_param/angle = -0.443
shader_param/position = 0.261
shader_param/spread = 0.712
shader_param/cutoff = -0.169
shader_param/falloff = 0.2
shader_param/edge_fade = 0.15
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = false
shader_param/seed = 5.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

void fragment()
{
	vec2 uv = UV;
    vec2 warpUV = 1. * uv;

	float d = length( warpUV );
	vec2 st = warpUV*0.7 + 0.3*vec2(cos(0.071*TIME*2.+d),
								sin(0.073*TIME*2.-d));

    vec3 warpedCol = texture( iChannel0, st ).xyz * 2.0;
    float w = max( warpedCol.r, 0.85);
	
    vec2 offset = 0.01 * cos( warpedCol.rg * 3.14159 );
    vec3 col = texture( iChannel1, uv + offset ).rgb * vec3(0.8, 0.8, 1.5) ;
	col *= w*1.2;
	
	COLOR = vec4( mix(col, texture( iChannel1, uv + offset ).rgb, 0.5),  1.0);
}"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 3 )
shader_param/iChannel0 = SubResource( 5 )
shader_param/iChannel1 = ExtResource( 10 )

[sub_resource type="Shader" id=7]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;
uniform float finalAlpha = 1.0;
uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, (rays * color.a * finalAlpha));
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/finalAlpha = 0.0
shader_param/angle = 1.145
shader_param/position = 0.201
shader_param/spread = 0.21
shader_param/cutoff = 0.089
shader_param/falloff = 0.2
shader_param/edge_fade = 0.15
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 0.772549, 0.615686, 0.45098, 1 )
shader_param/hdr = false
shader_param/seed = 5.0

[sub_resource type="Animation" id=9]
length = 2.0
tracks/0/type = "bezier"
tracks/0/path = NodePath("BG:modulate:a")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.9 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("BG/godrayshader2:material:shader_param/finalAlpha")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.2, 0.9 )
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.9 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ "Loop", "default" ],
"method": "play_anim"
} ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0.8 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ "ColorLoop", "default" ],
"method": "play_anim"
} ]
}
tracks/4/type = "bezier"
tracks/4/path = NodePath("logo:modulate:a")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 1.5, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.6 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath("2:modulate:r")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.8 )
}
tracks/6/type = "bezier"
tracks/6/path = NodePath("2:modulate:g")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.8 )
}
tracks/7/type = "bezier"
tracks/7/path = NodePath("2:modulate:b")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.8 )
}
tracks/8/type = "bezier"
tracks/8/path = NodePath("2:modulate:a")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.8 )
}
tracks/9/type = "bezier"
tracks/9/path = NodePath("AudioStreamPlayer:volume_db")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"points": PoolRealArray( -80, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.7 )
}

[sub_resource type="Animation" id=10]
length = 5.0
loop = true
tracks/0/type = "bezier"
tracks/0/path = NodePath("BG/godrayshader2:material:shader_param/finalAlpha")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 1, 2, 2.5, 3.5, 4, 4.5, 4.9 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("BG/godrayshader:material:shader_param/finalAlpha")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 1, 2, 2.5, 3.5, 4, 4.5, 4.9 )
}

[sub_resource type="Animation" id=11]
length = 7.0
loop = true
tracks/0/type = "bezier"
tracks/0/path = NodePath("vignette2:modulate:r")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 3, 6.1 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("vignette2:modulate:g")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 3, 6.1 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("vignette2:modulate:b")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 3, 6.1 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("vignette2:modulate:a")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 3, 6.1 )
}
tracks/4/type = "bezier"
tracks/4/path = NodePath("BG:modulate:r")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0.913725, -0.25, 0, 0.25, 0, 0.909804, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0.909804, -0.25, 0, 0.25, 0, 0.811765, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2, 3, 4, 5, 6, 6.9 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath("BG:modulate:g")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 0.909804, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0.909804, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0.807843, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2, 3, 4, 5, 6, 6.9 )
}
tracks/6/type = "bezier"
tracks/6/path = NodePath("BG:modulate:b")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 0.909804, -0.25, 0, 0.25, 0, 0.909804, -0.25, 0, 0.25, 0, 0.996078, -0.25, 0, 0.25, 0, 0.984314, -0.25, 0, 0.25, 0, 0.913725, -0.25, 0, 0.25, 0, 0.992157, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2, 3, 4, 5, 6, 6.9 )
}

[sub_resource type="Animation" id=12]
resource_name = "default"
loop = true
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:modulate:r")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 1 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:modulate:g")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 1 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath(".:modulate:b")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 1 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath(".:modulate:a")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 1 )
}

[node name="MainMenu" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 6 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BLANK" type="ColorRect" parent="."]
margin_right = 1024.0
margin_bottom = 600.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BG" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0 )
position = Vector2( 512, 300 )
texture = ExtResource( 8 )

[node name="bg_02" type="Sprite" parent="BG"]
modulate = Color( 1, 0.807843, 0.807843, 1 )
texture = ExtResource( 4 )

[node name="godrayshader" type="Sprite" parent="BG"]
material = SubResource( 2 )
texture = ExtResource( 8 )

[node name="trees" type="Sprite" parent="BG"]
texture = ExtResource( 5 )

[node name="mid" type="Sprite" parent="BG"]
texture = ExtResource( 3 )

[node name="Water" type="Sprite" parent="BG"]
material = SubResource( 6 )
position = Vector2( -8, 308 )
scale = Vector2( 1, -0.2 )
texture = ExtResource( 9 )

[node name="godrayshader2" type="Sprite" parent="BG"]
material = SubResource( 8 )
texture = ExtResource( 8 )

[node name="fronttree" type="Sprite" parent="BG"]
texture = ExtResource( 1 )

[node name="horse" type="Sprite" parent="BG"]
texture = ExtResource( 7 )

[node name="foreground" type="Sprite" parent="BG"]
texture = ExtResource( 2 )

[node name="vignette" type="Sprite" parent="."]
position = Vector2( 512, 300 )
texture = ExtResource( 9 )

[node name="vignette2" type="Sprite" parent="."]
position = Vector2( 512, 300 )
texture = ExtResource( 9 )

[node name="FadeIn" type="AnimationPlayer" parent="."]
autoplay = "default"
playback_speed = 0.5
anims/default = SubResource( 9 )

[node name="Loop" type="AnimationPlayer" parent="."]
playback_speed = 0.2
anims/default = SubResource( 10 )

[node name="ColorLoop" type="AnimationPlayer" parent="."]
playback_speed = 0.3
anims/default = SubResource( 11 )

[node name="2" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0 )
position = Vector2( 648, 104 )
scale = Vector2( 0.528485, 0.528485 )
texture = ExtResource( 12 )

[node name="logo" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0 )
position = Vector2( 512, 88 )
scale = Vector2( 0.738831, 0.738831 )
texture = ExtResource( 11 )

[node name="PressStart" type="RichTextLabel" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -122.0
margin_top = -15.5
margin_right = 122.0
margin_bottom = 15.5
custom_fonts/normal_font = ExtResource( 13 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_offset_x = 3
custom_constants/shadow_offset_y = 3
bbcode_enabled = true
bbcode_text = "[wave]Press START or ENTER[/wave]"
text = "Press START or ENTER"
fit_content_height = true
scroll_active = false
script = ExtResource( 14 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="PressStart"]
autoplay = "default"
playback_speed = 0.2
anims/default = SubResource( 12 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 15 )
volume_db = -80.0
autoplay = true

[node name="AudioManager" parent="." instance=ExtResource( 16 )]

[node name="PlaySound" parent="." instance=ExtResource( 17 )]
deleteAfterTrig = true
sfx = ExtResource( 18 )
[connection signal="started" from="PressStart" to="." method="load_menu"]
